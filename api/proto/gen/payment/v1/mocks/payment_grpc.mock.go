// Code generated by MockGen. DO NOT EDIT.
// Source: E:\webooktrial\api\proto\gen\payment\v1\payment_grpc.pb.go

// Package pmtmocks is a generated GoMock package.
package pmtmocks

import (
	context "context"
	reflect "reflect"
	pmtv1 "webooktrial/api/proto/gen/payment/v1"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockWechatPaymentServiceClient is a mock of WechatPaymentServiceClient interface.
type MockWechatPaymentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockWechatPaymentServiceClientMockRecorder
}

// MockWechatPaymentServiceClientMockRecorder is the mock recorder for MockWechatPaymentServiceClient.
type MockWechatPaymentServiceClientMockRecorder struct {
	mock *MockWechatPaymentServiceClient
}

// NewMockWechatPaymentServiceClient creates a new mock instance.
func NewMockWechatPaymentServiceClient(ctrl *gomock.Controller) *MockWechatPaymentServiceClient {
	mock := &MockWechatPaymentServiceClient{ctrl: ctrl}
	mock.recorder = &MockWechatPaymentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWechatPaymentServiceClient) EXPECT() *MockWechatPaymentServiceClientMockRecorder {
	return m.recorder
}

// GetPayment mocks base method.
func (m *MockWechatPaymentServiceClient) GetPayment(ctx context.Context, in *pmtv1.GetPaymentRequest, opts ...grpc.CallOption) (*pmtv1.GetPaymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPayment", varargs...)
	ret0, _ := ret[0].(*pmtv1.GetPaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockWechatPaymentServiceClientMockRecorder) GetPayment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockWechatPaymentServiceClient)(nil).GetPayment), varargs...)
}

// NativePrepay mocks base method.
func (m *MockWechatPaymentServiceClient) NativePrepay(ctx context.Context, in *pmtv1.PrepayRequest, opts ...grpc.CallOption) (*pmtv1.NativePrepayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NativePrepay", varargs...)
	ret0, _ := ret[0].(*pmtv1.NativePrepayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NativePrepay indicates an expected call of NativePrepay.
func (mr *MockWechatPaymentServiceClientMockRecorder) NativePrepay(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NativePrepay", reflect.TypeOf((*MockWechatPaymentServiceClient)(nil).NativePrepay), varargs...)
}

// MockWechatPaymentServiceServer is a mock of WechatPaymentServiceServer interface.
type MockWechatPaymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockWechatPaymentServiceServerMockRecorder
}

// MockWechatPaymentServiceServerMockRecorder is the mock recorder for MockWechatPaymentServiceServer.
type MockWechatPaymentServiceServerMockRecorder struct {
	mock *MockWechatPaymentServiceServer
}

// NewMockWechatPaymentServiceServer creates a new mock instance.
func NewMockWechatPaymentServiceServer(ctrl *gomock.Controller) *MockWechatPaymentServiceServer {
	mock := &MockWechatPaymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockWechatPaymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWechatPaymentServiceServer) EXPECT() *MockWechatPaymentServiceServerMockRecorder {
	return m.recorder
}

// GetPayment mocks base method.
func (m *MockWechatPaymentServiceServer) GetPayment(arg0 context.Context, arg1 *pmtv1.GetPaymentRequest) (*pmtv1.GetPaymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", arg0, arg1)
	ret0, _ := ret[0].(*pmtv1.GetPaymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockWechatPaymentServiceServerMockRecorder) GetPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockWechatPaymentServiceServer)(nil).GetPayment), arg0, arg1)
}

// NativePrepay mocks base method.
func (m *MockWechatPaymentServiceServer) NativePrepay(arg0 context.Context, arg1 *pmtv1.PrepayRequest) (*pmtv1.NativePrepayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NativePrepay", arg0, arg1)
	ret0, _ := ret[0].(*pmtv1.NativePrepayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NativePrepay indicates an expected call of NativePrepay.
func (mr *MockWechatPaymentServiceServerMockRecorder) NativePrepay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NativePrepay", reflect.TypeOf((*MockWechatPaymentServiceServer)(nil).NativePrepay), arg0, arg1)
}

// mustEmbedUnimplementedWechatPaymentServiceServer mocks base method.
func (m *MockWechatPaymentServiceServer) mustEmbedUnimplementedWechatPaymentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWechatPaymentServiceServer")
}

// mustEmbedUnimplementedWechatPaymentServiceServer indicates an expected call of mustEmbedUnimplementedWechatPaymentServiceServer.
func (mr *MockWechatPaymentServiceServerMockRecorder) mustEmbedUnimplementedWechatPaymentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWechatPaymentServiceServer", reflect.TypeOf((*MockWechatPaymentServiceServer)(nil).mustEmbedUnimplementedWechatPaymentServiceServer))
}

// MockUnsafeWechatPaymentServiceServer is a mock of UnsafeWechatPaymentServiceServer interface.
type MockUnsafeWechatPaymentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeWechatPaymentServiceServerMockRecorder
}

// MockUnsafeWechatPaymentServiceServerMockRecorder is the mock recorder for MockUnsafeWechatPaymentServiceServer.
type MockUnsafeWechatPaymentServiceServerMockRecorder struct {
	mock *MockUnsafeWechatPaymentServiceServer
}

// NewMockUnsafeWechatPaymentServiceServer creates a new mock instance.
func NewMockUnsafeWechatPaymentServiceServer(ctrl *gomock.Controller) *MockUnsafeWechatPaymentServiceServer {
	mock := &MockUnsafeWechatPaymentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeWechatPaymentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeWechatPaymentServiceServer) EXPECT() *MockUnsafeWechatPaymentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedWechatPaymentServiceServer mocks base method.
func (m *MockUnsafeWechatPaymentServiceServer) mustEmbedUnimplementedWechatPaymentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWechatPaymentServiceServer")
}

// mustEmbedUnimplementedWechatPaymentServiceServer indicates an expected call of mustEmbedUnimplementedWechatPaymentServiceServer.
func (mr *MockUnsafeWechatPaymentServiceServerMockRecorder) mustEmbedUnimplementedWechatPaymentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWechatPaymentServiceServer", reflect.TypeOf((*MockUnsafeWechatPaymentServiceServer)(nil).mustEmbedUnimplementedWechatPaymentServiceServer))
}
